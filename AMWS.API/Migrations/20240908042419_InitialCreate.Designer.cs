// <auto-generated />
using System;
using AWMS.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWMS.API.Migrations
{
    [DbContext(typeof(AWMSAPIDBContext))]
    [Migration("20240908042419_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Area", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.AreaPurpose", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.ToTable("AreaPurpose");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Carrier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Carrier");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.CompanyAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.CustomerAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CartonCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DeliverToAddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackingSlipNo")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliverToAddressID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("ReceivedByID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.DeliveryItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("ProductID");

                    b.ToTable("DeliveryItem");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Designation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Dock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DockName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DockType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Dock");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.DockStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("DockStatus");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Docking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DockID")
                        .HasColumnType("int");

                    b.Property<int>("DockStatusID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlotLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DockID");

                    b.HasIndex("DockStatusID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Docking");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Driver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("DamagedStock")
                        .HasColumnType("int");

                    b.Property<int>("LastPurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStockUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("RecentCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockLimit")
                        .HasColumnType("int");

                    b.Property<int>("ThreshHold")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("LastPurchaseOrderID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("RegionID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.NotificationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorizedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceToAddressID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PickingID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuoteNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipToAddressID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizedByID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("InvoiceToAddressID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PickingID");

                    b.HasIndex("ShipToAddressID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.OrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Packing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BegunAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DockID")
                        .HasColumnType("int");

                    b.Property<int>("DoneByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackingAreaID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DockID");

                    b.HasIndex("DoneByID");

                    b.HasIndex("PackingAreaID");

                    b.HasIndex("ProductID");

                    b.ToTable("Packing");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PackingArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("PackingArea");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Picking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BegunAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DoneByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PickingAreaID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoneByID");

                    b.HasIndex("PickingAreaID");

                    b.HasIndex("ProductID");

                    b.ToTable("Picking");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PickingArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("PickingArea");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ProductCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ProductCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("Code")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CodeString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCodes");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PurchaseOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipToAddressID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ShipToAddressID");

                    b.HasIndex("StatusID");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("PurchaseOrderStatus");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Receipt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("GoodsStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiptLine")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedByID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseOrderID");

                    b.HasIndex("ReceivedByID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ReceiptLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AddToInventory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("LineStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("POLineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousReceipts")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ReceiptLine");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ReceiveStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("RequestTransferID")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("RequestID");

                    b.HasIndex("RequestTransferID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("ReceiveStock");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.RequestStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfirmedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("FromWarehouseID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackingAreaID")
                        .HasColumnType("int");

                    b.Property<int>("RequesterID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ConfirmedByID");

                    b.HasIndex("FromWarehouseID");

                    b.HasIndex("PackingAreaID");

                    b.HasIndex("RequesterID");

                    b.ToTable("RequestStock");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.RequestTransfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromWarehouseID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ToWarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FromWarehouseID");

                    b.HasIndex("ToWarehouseID");

                    b.ToTable("RequestTransfer");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.SendStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestTransferID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendStockDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SentByID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RequestTransferID");

                    b.HasIndex("SentByID");

                    b.ToTable("SendStock");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CarrierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DockID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateActual")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateExpected")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndLegLocationID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateActual")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateExpected")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartLegLocationID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarrierID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DockID");

                    b.HasIndex("EndLegLocationID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("PurchaseOrderID");

                    b.HasIndex("StartLegLocationID");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.StockMovement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorizedByID")
                        .HasColumnType("int");

                    b.Property<int>("BatchNo")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("FromLocationID")
                        .HasColumnType("int");

                    b.Property<int>("FromWarehouseID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int>("PreparedByID")
                        .HasColumnType("int");

                    b.Property<int>("RequestTransferID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ToLocationID")
                        .HasColumnType("int");

                    b.Property<int>("ToWarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizedByID");

                    b.HasIndex("FromLocationID");

                    b.HasIndex("FromWarehouseID");

                    b.HasIndex("PreparedByID");

                    b.HasIndex("RequestTransferID");

                    b.HasIndex("ToLocationID");

                    b.HasIndex("ToWarehouseID");

                    b.ToTable("StockMovement");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.SupplierAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SupplierAddress");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Warehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.Common.Domain.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("ChangePasswordRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeVerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordChangedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerificationCodeEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VerificationCodeExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VerificationCodeUsageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("JWarehouseSystem.Common.Domain.UserAudit", b =>
                {
                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Area", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.AreaPurpose", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Area", "Area")
                        .WithMany("Purposes")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Carrier", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Company", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.CompanyAddress", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Country", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Currency", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Customer", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.CustomerAddress", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Delivery", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.CustomerAddress", "DeliverToAddress")
                        .WithMany()
                        .HasForeignKey("DeliverToAddressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("DeliverToAddress");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReceivedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.DeliveryItem", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Delivery");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Department", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Designation", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Dock", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.DockStatus", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Docking", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.DockStatus", "DockStatus")
                        .WithMany()
                        .HasForeignKey("DockStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dock");

                    b.Navigation("DockStatus");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Driver", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Employee", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Inventory", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PurchaseOrder", "LastPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("LastPurchaseOrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastPurchaseOrder");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Location", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Order", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "AuthorizedBy")
                        .WithMany()
                        .HasForeignKey("AuthorizedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.CustomerAddress", "InvoiceToAddress")
                        .WithMany()
                        .HasForeignKey("InvoiceToAddressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Picking", null)
                        .WithMany("Orders")
                        .HasForeignKey("PickingID");

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.CustomerAddress", "ShipToAddress")
                        .WithMany()
                        .HasForeignKey("ShipToAddressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AuthorizedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("InvoiceToAddress");

                    b.Navigation("ModifiedBy");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.OrderItem", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.OrderStatus", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Packing", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "DoneBy")
                        .WithMany()
                        .HasForeignKey("DoneByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PackingArea", "PackingArea")
                        .WithMany()
                        .HasForeignKey("PackingAreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dock");

                    b.Navigation("DoneBy");

                    b.Navigation("PackingArea");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PackingArea", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Picking", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "DoneBy")
                        .WithMany()
                        .HasForeignKey("DoneByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PickingArea", "PickingArea")
                        .WithMany()
                        .HasForeignKey("PickingAreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoneBy");

                    b.Navigation("PickingArea");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PickingArea", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Product", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ProductCategory", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ProductCode", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", null)
                        .WithMany("ProductCodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PurchaseOrder", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.CompanyAddress", "ShipToAddress")
                        .WithMany()
                        .HasForeignKey("ShipToAddressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PurchaseOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ShipToAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.PurchaseOrderStatus", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Receipt", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("ReceivedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ReceiptLine", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.ReceiveStock", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.RequestStock", "Request")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.RequestTransfer", "RequestTransfer")
                        .WithMany()
                        .HasForeignKey("RequestTransferID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Receiver");

                    b.Navigation("Request");

                    b.Navigation("RequestTransfer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Region", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.RequestStock", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PackingArea", "PackingArea")
                        .WithMany()
                        .HasForeignKey("PackingAreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConfirmedBy");

                    b.Navigation("FromWarehouse");

                    b.Navigation("PackingArea");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.RequestTransfer", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.SendStock", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.RequestTransfer", "RequestTransfer")
                        .WithMany()
                        .HasForeignKey("RequestTransferID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestTransfer");

                    b.Navigation("SentBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Shipment", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Carrier", "Ship")
                        .WithMany()
                        .HasForeignKey("CarrierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "EndLegLocation")
                        .WithMany()
                        .HasForeignKey("EndLegLocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "StartLegLocation")
                        .WithMany()
                        .HasForeignKey("StartLegLocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Dock");

                    b.Navigation("EndLegLocation");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Ship");

                    b.Navigation("StartLegLocation");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.StockMovement", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "AuthorizedBy")
                        .WithMany()
                        .HasForeignKey("AuthorizedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Employee", "PreparedBy")
                        .WithMany()
                        .HasForeignKey("PreparedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.RequestTransfer", "RequestTransfer")
                        .WithMany()
                        .HasForeignKey("RequestTransferID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AuthorizedBy");

                    b.Navigation("FromLocation");

                    b.Navigation("FromWarehouse");

                    b.Navigation("PreparedBy");

                    b.Navigation("RequestTransfer");

                    b.Navigation("ToLocation");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Supplier", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.SupplierAddress", b =>
                {
                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Warehouse", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.BackEnd.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.Common.Domain.User", b =>
                {
                    b.HasOne("JWarehouseSystem.Common.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JWarehouseSystem.Common.Domain.User", "ModifiedBy")
                        .WithOne()
                        .HasForeignKey("JWarehouseSystem.Common.Domain.User", "ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Area", b =>
                {
                    b.Navigation("Purposes");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Picking", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JWarehouseSystem.BackEnd.Domain.Product", b =>
                {
                    b.Navigation("ProductCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
